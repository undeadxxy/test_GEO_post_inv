testCommonCode;


% test methods
methods = {
% 1. name:      method name
% 2. flag:      method flag
% 3. regParam:  regularization parameter
% 4. parampkgs: some other information required for regularization
% 5. options:   options for controling inversion process
    
    struct(...
        'name', 'DLSR (K=1 gamma=0)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 1, 'gamma', 0), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.5}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'mat', ...
            'fileName', '' ...
        )...
    );
    
    struct(...
        'name', 'DLSR (K=1 gamma=0.2)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 1, 'gamma', 0.2), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.5}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'mat', ...
            'fileName', '' ...
        )...
    );
    
    struct(...
        'name', 'DLSR (K=1 gamma=0.4)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 1, 'gamma', 0.4), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.5}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'mat', ...
            'fileName', '' ...
        )...
    );
    
    struct(...
        'name', 'DLSR (K=1 gamma=0.6)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 1, 'gamma', 0.6), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.5}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'mat', ...
            'fileName', '' ...
        )...
    );
    
    struct(...
        'name', 'DLSR (K=1 gamma=0.8)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 1, 'gamma', 0.8), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.5}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'mat', ...
            'fileName', '' ...
        )...
    );
    
    struct(...
        'name', 'DLSR (K=1 gamma=1)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 1, 'gamma', 1), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.5}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'mat', ...
            'fileName', '' ...
        )...
    );
    
};


% inverse the whole volume
[X, Y] = meshgrid(1:142, 1:110);
inIds = reshape(X, 1, 142*110);
crossIds = reshape(Y, 1, 142*110);
% perform the inversion process based on given methods
invResults = bsPostInvTrueMultiTraces(GPostInvParam, inIds, crossIds, timeLine, methods);

