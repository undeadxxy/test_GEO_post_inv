testCommonCode;
 
% synFileName = 'E:/HRS projects/GEO_POST//seismic//synthetic__gamma=1.00_sparsity_5_inline_[1_142]_crossline_[16_83].sgy';
% GInvParam.postSeisData.fileName = synFileName;


GInvParam.seisInvOptions.GBOptions.isSaveMiddleRes = 1;
GInvParam.errorModel.isUse = 0;

% fileName = 'E:/HRS projects/GEO_POST//seismic//error_model__gamma=0.90_sparsity_5_inline_[16_129]_crossline_[16_91].sgy';
% wells = cell2mat(wellLogs);
% nWell = length(wells);
% inIds = [wells.inline];
% crossIds = [wells.crossline];
% synData = bsReadTracesByIdsAndTimeLine(fileName, GInvParam.postSeisData.segyInfo, inIds, crossIds, ...
%             timeLine{GInvParam.usedTimeLineId}, GInvParam.upNum, GInvParam.downNum, GInvParam.dt);
%     
% GInvParam.postSeisData.mode = 'function';
%         GInvParam.postSeisData.fcn = @(inline, crossline, startTime)...
%             (synData(1:end-1, inIds==inline &crossIds==crossline));
        
% test methods
methods = {
% 1. name:      method name
% 2. flag:      method flag
% 3. regParam:  regularization parameter
% 4. parampkgs: some other information required for regularization
% 5. options:   options for controling inversion process
    
%     struct(...
%         'name', 'HAGCS-TV', ...
%         'flag', 'HAGCS', ...
%         'regParam', 0.1, ...
%         'parampkgs', [], ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'regFunc', @bsReg1DTV; ...
%             'addLowFreqConstraint', 1; ...
%             'initRegParam', 0.05}) ...
%     );
%     
%     struct(...
%         'name', 'TV', ...
%         'flag', 'TV', ...
%         'regParam', 0.1, ...
%         'parampkgs', struct('diffOrder', 1), ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'maxIter', 500; 'initRegParam', 0.05}) ...
%     ); 

%     struct(...
%         'name', 'TK-1', ...
%         'flag', 'TK', ...
%         'regParam', 10, ...
%         'parampkgs', struct('diffOrder', 2), ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'maxIter', 200; 'initRegParam', 0.5}) ...
%     ); 
    
%     struct(...
%         'name', 'HAGCS-LFC', ...
%         'flag', 'HAGCS', ...
%         'regParam', 0.01, ...
%         'parampkgs', [], ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'regFunc', @bsReg1DTKInitModel; ...
%             'addLowFreqConstraint', 0; ...
%             'initRegParam', 0.05}) ...
%     );
    
    struct(...
        'name', 'LFC', ...
        'flag', 'LFC', ...
        'regParam', 0.1, ...
        'parampkgs', [], ...
        'options', bsSetFields(GInvParam.seisInvOptions, {'maxIter', 400}) ...
    );

%     struct(...
%         'name', 'LFC-Similarity', ...
%         'flag', 'LFC', ...
%         'regParam', 0.01, ...
%         'parampkgs', [], ...
%         'options', bsSetFields(GInvParam.seisInvOptions, ...
%         {'maxIter', 1000; 'mainFunc', @bsLinearTwoNormSimilarity}) ...
%     );
%     
    struct(...
        'name', 'DLSR (gamma=0.2)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 2, 'gamma', 1), ...
        'parampkgs', GSparseInvParam, ...
        'options', bsSetFields(GInvParam.seisInvOptions, ...
            {'maxIter', 20; 'innerIter', 10; 'initRegParam', 0.01}) ...
    );
    
};

% inverse the blind wells
for iWell = bsRandSeq(1:104, 10)
% for iWell = [23, 21, 18, 53, 80, 75]
% for iWell = train_ids
    wellInfo = wellLogs{iWell};
    [invVals, outputs] = bsPostInvTrueWell(GInvParam, wellInfo, timeLine, methods);
    
    bsShowPostInvLogResult(GInvParam, GShowProfileParam, invVals, GTrainDICParam.filtCoef, 0);
%     title(sprintf('Well %s', wellLogs{iWell}.wellName));
end

% set(gcf, 'position', [336   240   509   694]);