testCommonCode;
          

GShowProfileParam.rangeIP = [5000 8000];

% test methods
methods = {
% 1. name:      method name
% 2. flag:      method flag
% 3. regParam:  regularization parameter
% 4. parampkgs: some other information required for regularization
% 5. options:   options for controling inversion process
    
%     struct(...
%         'name', 'TV-1', ...
%         'flag', 'TV', ...
%         'regParam', 2, ...
%         'parampkgs', struct('diffOrder', 1), ...
%         'options', bsSetFields(seisInvOptions, {'maxIter', 200; 'initRegParam', 0.5}) ...
%     ); 
%     struct(...
%         'name', 'TK-1', ...
%         'flag', 'TK', ...
%         'regParam', 10, ...
%         'parampkgs', struct('diffOrder', 2), ...
%         'options', bsSetFields(seisInvOptions, {'maxIter', 200; 'initRegParam', 0.5}) ...
%     ); 
    struct(...
        'name', 'LFC', ...
        'flag', 'LFC', ...
        'regParam', 0.5, ...
        'parampkgs', [], ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 400}) ...
    );
%     struct(...
%         'name', 'DLSR', ...
%         'flag', 'DLSR', ...
%         'regParam', struct('lambda', 1, 'gamma', 0), ...
%         'parampkgs', struct('GSparseInvParam', GSparseInvParam), ...
%         'options', bsSetFields(seisInvOptions, {'maxIter', 20; 'innerIter', 200; 'initRegParam', 0.5}) ...
%     )
    
    struct(...
        'name', 'DLSR (K=1 gamma=0.2)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 0.4, 'gamma', 0.2), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.2}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'off', ...
            'fileName', '' ...
        )...
    );
    
    struct(...
        'name', 'DLSR (K=1 gamma=0.4)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 0.4, 'gamma', 0.4), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.2}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'off', ...
            'fileName', '' ...
        )...
    );
    
    struct(...
        'name', 'DLSR (K=1 gamma=0.6)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 0.4, 'gamma', 0.6), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(seisInvOptions, {'maxIter', 5; 'innerIter', 40; 'initRegParam', 0.2}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'off', ...
            'fileName', '' ...
        )...
    );
    
};

% inverse the blind wells
for iWell = train_ids
% for iWell = train_ids
    wellInfo = wellLogs{iWell};
    [invVals, outputs] = bsPostInvTrueWell(GPostInvParam, wellInfo, timeLine, methods);
    
    bsShowPostInvLogResult(GPostInvParam, GPlotParam, GShowProfileParam, invVals, GTrainDICParam.filtCoef);
%     title(sprintf('Well %s', wellLogs{iWell}.wellName));
end

