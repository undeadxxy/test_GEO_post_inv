testCommonCode;
          

GInvParam.seisInvOptions.GBOptions.isSaveMiddleRes = 1;
GInvParam.isMinusError = 1;

% test methods
methods = {
% 1. name:      method name
% 2. flag:      method flag
% 3. regParam:  regularization parameter
% 4. parampkgs: some other information required for regularization
% 5. options:   options for controling inversion process
    
%     struct(...
%         'name', 'HAGCS-TV', ...
%         'flag', 'HAGCS', ...
%         'regParam', 0.1, ...
%         'parampkgs', [], ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'regFunc', @bsReg1DTV; ...
%             'addLowFreqConstraint', 1; ...
%             'initRegParam', 0.05}) ...
%     );
%     
%     struct(...
%         'name', 'TV', ...
%         'flag', 'TV', ...
%         'regParam', 0.1, ...
%         'parampkgs', struct('diffOrder', 1), ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'maxIter', 500; 'initRegParam', 0.05}) ...
%     ); 

%     struct(...
%         'name', 'TK-1', ...
%         'flag', 'TK', ...
%         'regParam', 10, ...
%         'parampkgs', struct('diffOrder', 2), ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'maxIter', 200; 'initRegParam', 0.5}) ...
%     ); 
    
%     struct(...
%         'name', 'HAGCS-LFC', ...
%         'flag', 'HAGCS', ...
%         'regParam', 0.01, ...
%         'parampkgs', [], ...
%         'options', bsSetFields(GInvParam.seisInvOptions, {'regFunc', @bsReg1DTKInitModel; ...
%             'addLowFreqConstraint', 0; ...
%             'initRegParam', 0.05}) ...
%     );
    
    struct(...
        'name', 'LFC', ...
        'flag', 'LFC', ...
        'regParam', 0.05, ...
        'parampkgs', [], ...
        'options', bsSetFields(GInvParam.seisInvOptions, {'maxIter', 400}) ...
    );

    struct(...
        'name', 'LFC-Similarity', ...
        'flag', 'LFC', ...
        'regParam', 0.01, ...
        'parampkgs', [], ...
        'options', bsSetFields(GInvParam.seisInvOptions, ...
        {'maxIter', 1000; 'mainFunc', @bsLinearTwoNormSimilarity}) ...
    );
    
    struct(...
        'name', 'DLSR (gamma=0.2)', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 0.6, 'gamma', 0.2), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, {'sparsity', 1; 'isSparseRebuild', 1; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(GInvParam.seisInvOptions, ...
        {'maxIter', 20; 'innerIter', 10; 'initRegParam', 0.06}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'off', ...
            'fileName', '' ...
        )...
    );

    struct(...
        'name', 'DLSR (gamma=0.2) Similarity', ...
        'flag', 'DLSR', ...
        'regParam', struct('lambda', 0.6, 'gamma', 0.2), ...
        'parampkgs', struct('GSparseInvParam', bsSetFields(GSparseInvParam, ...
            {'sparsity', 1; 'isSparseRebuild', 1; 'isScale', 0; 'reconstructType', 'simpleAvg'})), ...
        'options', bsSetFields(GInvParam.seisInvOptions, ...
            {'maxIter', 20; 'innerIter', 10; 'initRegParam',0.06; 'mainFunc', @bsLinearTwoNormSimilarity}), ...
        'showFiltCoef', 1, ...
        'isSaveSegy', 1, ...
        'isSaveMat', 1, ...
        'load', struct(...
            'mode', 'mat', ...
            'fileName', '' ...
        )...
    );
    
};

% inverse the blind wells
for iWell = 9
% for iWell = train_ids
    wellInfo = wellLogs{iWell};
    [invVals, outputs] = bsPostInvTrueWell(GInvParam, wellInfo, timeLine, methods);
    
    bsShowPostInvLogResult(GInvParam, GShowProfileParam, invVals, GTrainDICParam.filtCoef, 0);
%     title(sprintf('Well %s', wellLogs{iWell}.wellName));
end

% set(gcf, 'position', [336   240   509   694]);